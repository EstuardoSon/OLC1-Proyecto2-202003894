/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,22],$V2=[1,23],$V3=[1,24],$V4=[1,25],$V5=[1,26],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,17],$Vc=[1,18],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[2,5,15,16,17,18,19,21,65,66,67,71,73,74,76,77,78,79],$Vh=[1,43],$Vi=[21,22,31],$Vj=[2,5,15,16,17,18,19,21,30,36,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,71,73,74,76,77,78,79],$Vk=[9,24,32],$Vl=[9,31],$Vm=[1,61],$Vn=[1,54],$Vo=[1,52],$Vp=[1,53],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[1,66],$VB=[1,67],$VC=[1,99],$VD=[1,100],$VE=[1,89],$VF=[1,85],$VG=[1,86],$VH=[1,87],$VI=[1,88],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[1,94],$VO=[1,95],$VP=[1,96],$VQ=[1,97],$VR=[1,98],$VS=[1,101],$VT=[9,23,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],$VU=[21,30,36,52,53,54,55,56,57,58,59,60,61,62,63,64],$VV=[2,5,15,16,17,18,19,21,65,66,67,70,71,73,74,76,77,78,79],$VW=[9,23,31,32,48,49,50,51],$VX=[9,23,31,32,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51],$VY=[9,23,31,32,36,40,42,43,44,45,46,47,48,49,50,51],$VZ=[9,23,31,32,42,43,44,45,46,47,48,49,50,51],$V_=[1,194],$V$=[23,32];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"TipoInstruccion":6,"Declaraciones":7,"Inicializacion":8,"PTCOMA":9,"Print":10,"If":11,"Ciclo":12,"Break":13,"TipoVar":14,"INT":15,"DOUBLE":16,"BOOLEAN":17,"CHAR":18,"STRING":19,"Variables":20,"IDENTIFICADOR":21,"CORCHETEABRE":22,"CORCHETECIERRE":23,"ASIGNACION":24,"ListaVectores":25,"NEW":26,"Valor":27,"ListaValores":28,"TOCHARARRAY":29,"PARABRE":30,"PARCIERRE":31,"COMA":32,"INCREMENTO":33,"DECREMENTO":34,"Variables2":35,"RESTA":36,"POTENCIA":37,"MULTIPLICACION":38,"DIVISION":39,"SUMA":40,"MODULO":41,"IGUAL":42,"DIFERENTE":43,"MENOR":44,"MENORIGUAL":45,"MAYOR":46,"MAYORIGUAL":47,"OR":48,"AND":49,"TERNARIO":50,"DOSPT":51,"NEGACION":52,"ENTERO":53,"DECIMAL":54,"CADENA":55,"CARACTER":56,"TRUE":57,"FALSE":58,"TOSTRING":59,"LENGTH":60,"TOLOWER":61,"TOUPPER":62,"TYPEOF":63,"ROUND":64,"PRINT":65,"PRINTLN":66,"IF":67,"Entorno":68,"Else":69,"ELSE":70,"FOR":71,"Param1":72,"WHILE":73,"DO":74,"LLAVEABRE":75,"LLAVECIERRE":76,"BREAK":77,"CONTINUE":78,"RETURN":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PTCOMA",15:"INT",16:"DOUBLE",17:"BOOLEAN",18:"CHAR",19:"STRING",21:"IDENTIFICADOR",22:"CORCHETEABRE",23:"CORCHETECIERRE",24:"ASIGNACION",26:"NEW",29:"TOCHARARRAY",30:"PARABRE",31:"PARCIERRE",32:"COMA",33:"INCREMENTO",34:"DECREMENTO",36:"RESTA",37:"POTENCIA",38:"MULTIPLICACION",39:"DIVISION",40:"SUMA",41:"MODULO",42:"IGUAL",43:"DIFERENTE",44:"MENOR",45:"MENORIGUAL",46:"MAYOR",47:"MAYORIGUAL",48:"OR",49:"AND",50:"TERNARIO",51:"DOSPT",52:"NEGACION",53:"ENTERO",54:"DECIMAL",55:"CADENA",56:"CARACTER",57:"TRUE",58:"FALSE",59:"TOSTRING",60:"LENGTH",61:"TOLOWER",62:"TOUPPER",63:"TYPEOF",64:"ROUND",65:"PRINT",66:"PRINTLN",67:"IF",70:"ELSE",71:"FOR",73:"WHILE",74:"DO",75:"LLAVEABRE",76:"LLAVECIERRE",77:"BREAK",78:"CONTINUE",79:"RETURN"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[14,1],[14,1],[14,1],[14,1],[14,1],[7,2],[7,11],[7,16],[7,9],[7,11],[7,10],[28,3],[28,1],[25,5],[25,3],[8,2],[8,5],[8,8],[8,2],[8,5],[8,8],[8,3],[8,6],[8,9],[20,4],[20,2],[35,3],[35,1],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,5],[27,2],[27,3],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,7],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[10,5],[10,4],[10,5],[10,4],[11,6],[69,2],[69,2],[69,0],[12,8],[12,5],[12,7],[72,1],[72,2],[68,3],[68,2],[13,2],[13,2],[13,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2:
 this.$=$$[$0] 
break;
case 3:
 for(let instruccion of $$[$0]){ $$[$0-1].push(instruccion) } this.$=$$[$0-1]  
break;
case 5: case 36: case 58: case 87: case 88:
 this.$ = $$[$0-1] 
break;
case 7: case 23:
 this.$ = [$$[$0]] 
break;
case 10:
 Errores.push(new ErrorE(this._$.first_line, this._$.first_column,'Sintactico', "Error Sintactico token inesperado: "+this.$ )); this.$=[] 
break;
case 11:
 this.$ = 0 
break;
case 12:
 this.$ = 1 
break;
case 13:
 this.$ = 2 
break;
case 14:
 this.$ = 3 
break;
case 15:
 this.$ = 4 
break;
case 16:
 var arreglo= []; for(let variable of $$[$0]){ arreglo.push(new Declaracion(variable[0],variable[1],variable[2],variable[3],$$[$0-1])) } this.$=arreglo 
break;
case 17:
 this.$ = [new MatrizDec1($$[$0-9], $$[$0-10], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column)] 
break;
case 18:
 this.$ = [new MatrizDec2($$[$0-14], $$[$0-15], $$[$0-7], $$[$0-5], $$[$0-2], _$[$0-15].first_line, _$[$0-15].first_column)] 
break;
case 19:
 this.$ = [new VectorDec1($$[$0-7], $$[$0-8], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column)] 
break;
case 20:
 this.$ = [new VectorDec2($$[$0-9], $$[$0-10], $$[$0-4], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column)] 
break;
case 21:
 this.$ = [new VectorDec3($$[$0-8],$$[$0-9], $$[$0-2], _$[$0-9].first_line, _$[$0-9].first_column)] 
break;
case 22:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 24:
 $$[$0-4].push($$[$0-1]); this.$ = $$[$0-4] 
break;
case 25:
 this.$ = [$$[$0-1]] 
break;
case 26:
 this.$ = [new Inicializacion(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], new Aritmetica( new Llamado($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column), new Literal(1, 0, _$[$0-1].first_line, _$[$0-1].first_column),7, _$[$0-1].first_line, _$[$0-1].first_column))] 
break;
case 27:
 this.$ = [new InicializacionV($$[$0-4], $$[$0-2], new Aritmetica( new LlamadoV($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column), new Literal(1, 0, _$[$0-4].first_line, _$[$0-4].first_column),7, _$[$0-4].first_line, _$[$0-4].first_column), _$[$0-4].first_line, _$[$0-4].first_column)]
break;
case 28:
 this.$ = [new InicializacionM($$[$0-7], $$[$0-5], $$[$0-2], new Aritmetica( this.$ = new LlamadoM($$[$0-7], $$[$0-5], $$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column), new Literal(1, 0, _$[$0-7].first_line, _$[$0-7].first_column),7, _$[$0-7].first_line, _$[$0-7].first_column), _$[$0-7].first_line, _$[$0-7].first_column)] 
break;
case 29:
 this.$ = [new Inicializacion(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], new Aritmetica( new Llamado($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column), new Literal(1, 0, _$[$0-1].first_line, _$[$0-1].first_column),8, _$[$0-1].first_line, _$[$0-1].first_column))] 
break;
case 30:
 this.$ = [new InicializacionV($$[$0-4], $$[$0-2], new Aritmetica( new LlamadoV($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column), new Literal(1, 0, _$[$0-4].first_line, _$[$0-4].first_column),8, _$[$0-4].first_line, _$[$0-4].first_column), _$[$0-4].first_line, _$[$0-4].first_column)]
break;
case 31:
 this.$ = [new InicializacionM($$[$0-7], $$[$0-5], $$[$0-2], new Aritmetica( this.$ = new LlamadoM($$[$0-7], $$[$0-5], $$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column), new Literal(1, 0, _$[$0-7].first_line, _$[$0-7].first_column),8, _$[$0-7].first_line, _$[$0-7].first_column), _$[$0-7].first_line, _$[$0-7].first_column)] 
break;
case 32:
 this.$ = [new Inicializacion(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])] 
break;
case 33:
 this.$ = [new InicializacionV($$[$0-5], $$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column)] 
break;
case 34:
 this.$ = [new InicializacionM($$[$0-8], $$[$0-6], $$[$0-3], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column)] 
break;
case 35:
 for( i in $$[$0-3] ){ $$[$0-3][i][3] = $$[$0-1] } this.$ = $$[$0-3] 
break;
case 37:
 $$[$0-2].push([_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], null]); this.$ = $$[$0-2]  
break;
case 38:
 this.$ =[ [_$[$0].first_line, _$[$0].first_column, $$[$0], null] ] 
break;
case 39:
 this.$ = new Aritmetica($$[$0],new Literal(-1, 0, _$[$0-1].first_line, _$[$0-1].first_column),2, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 40:
 this.$ = new Aritmetica($$[$0-2],$$[$0],4, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 41:
 this.$ = new Aritmetica($$[$0-2],$$[$0],2, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 42:
 this.$ = new Aritmetica($$[$0-2],$$[$0],3, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 43:
 this.$ = new Aritmetica($$[$0-2],$$[$0],0, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 44:
 this.$ = new Aritmetica($$[$0-2],$$[$0],1, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 45:
 this.$ = new Aritmetica($$[$0-2],$$[$0],5, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 46:
 this.$ = new Relacional($$[$0-2],$$[$0],0, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 47:
 this.$ = new Relacional($$[$0-2],$$[$0],1, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 48:
 this.$ = new Relacional($$[$0-2],$$[$0],4, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 49:
this.$ = new Relacional($$[$0-2],$$[$0],5, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 50:
 this.$ = new Relacional($$[$0-2],$$[$0],2, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 51:
 this.$ = new Relacional($$[$0-2],$$[$0],3, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 52:
 this.$ = new Relacional($$[$0-2],$$[$0],7, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 53:
 this.$ = new Relacional($$[$0-2],$$[$0],6, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 54:
 this.$ = new Aritmetica($$[$0-1],new Literal(1, 0, _$[$0-1].first_line, _$[$0-1].first_column),7, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 55:
 this.$ = new Aritmetica($$[$0-1],new Literal(1, 0, _$[$0-1].first_line, _$[$0-1].first_column),8, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 56:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 57:
 this.$ = new Negacion($$[$0],2, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 59:
this.$ = new Literal($$[$0],0, _$[$0].first_line, _$[$0].first_column) 
break;
case 60:
 this.$ = new Literal($$[$0],1, _$[$0].first_line, _$[$0].first_column) 
break;
case 61:
 this.$ = new Literal($$[$0], 4, _$[$0].first_line, _$[$0].first_column) 
break;
case 62:
 this.$ = new Literal($$[$0], 3, _$[$0].first_line, _$[$0].first_column) 
break;
case 63:
 this.$ = new Literal(true, 2, _$[$0].first_line, _$[$0].first_column) 
break;
case 64:
 this.$ = new Literal(false, 2, _$[$0].first_line, _$[$0].first_column) 
break;
case 65:
 this.$ = new Llamado($$[$0], _$[$0].first_line, _$[$0].first_column) 
break;
case 66:
 this.$ = new LlamadoM($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 67:
 this.$ = new LlamadoV($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 68:
 this.$ = new Casteo($$[$0], $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 69:
 this.$ = new TOString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 70:
 this.$ = new LENGHT($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 71:
 this.$ = new TOLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 72:
 this.$ = new TOUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 73:
 this.$ = new TypeOF($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 74:
 this.$ = new Redondear($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 75:
 this.$ = [new Print(_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2])] 
break;
case 76:
 this.$ = [new Print(_$[$0-3].first_line, _$[$0-3].first_column, new Literal("", 4, _$[$0-3].first_line, _$[$0-3].first_column))] 
break;
case 77:
 this.$ = [new Println(_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2])] 
break;
case 78:
 this.$ = [new Println(_$[$0-3].first_line, _$[$0-3].first_column, new Literal("", 4, _$[$0-3].first_line, _$[$0-3].first_column))] 
break;
case 79:
 this.$ = new If($$[$0-3], new Entorno($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column), $$[$0], _$[$0-5].first_line, _$[$0-5].first_column)  
break;
case 80:
 this.$ = new Entorno($$[$0], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 81:
 this.$ = $$[$0] 
break;
case 82:
 this.$ = null 
break;
case 83:
 let a =[]; a.push(new Entorno($$[$0], _$[$0-7].first_line, _$[$0-7].first_column)); $$[$0-5].push(new EntornoC($$[$0-4], a, $$[$0-2][0], _$[$0-7].first_line, _$[$0-7].first_column)); this.$ = [ new Ciclo(new Entorno($$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column), _$[$0-7].first_line, _$[$0-7].first_column)] 
break;
case 84:
 this.$ = [new Ciclo(new EntornoC($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column), _$[$0-4].first_line, _$[$0-4].first_column)] 
break;
case 85:
 this.$ = [new Ciclo(new EntornoD($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column), _$[$0-6].first_line, _$[$0-6].first_column)] 
break;
case 89:
 this.$ = [] 
break;
case 90:
 this.$ = [ new BREAK("Break", _$[$0-1].first_line, _$[$0-1].first_column) ] 
break;
case 91:
 this.$ = [ new BREAK("Continue", _$[$0-1].first_line, _$[$0-1].first_column) ] 
break;
case 92:
 this.$ = [ new BREAK("Return", _$[$0-1].first_line, _$[$0-1].first_column) ] 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:11,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,21:$V6,65:$V7,66:$V8,67:$V9,71:$Va,73:$Vb,74:$Vc,77:$Vd,78:$Ve,79:$Vf},{1:[3]},{2:$V0,5:[1,27],6:28,7:4,8:5,10:6,11:7,12:8,13:9,14:11,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,21:$V6,65:$V7,66:$V8,67:$V9,71:$Va,73:$Vb,74:$Vc,77:$Vd,78:$Ve,79:$Vf},o($Vg,[2,2]),o($Vg,[2,4]),{9:[1,29]},o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),{20:30,21:[1,31],35:32},{22:[1,34],24:[1,36],33:[1,33],34:[1,35]},{30:[1,37]},{30:[1,38]},{30:[1,39]},{30:[1,40]},{30:[1,41]},{68:42,75:$Vh},{9:[1,44]},{9:[1,45]},{9:[1,46]},o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),{1:[2,1]},o($Vg,[2,3]),o($Vg,[2,5]),o($Vj,[2,16]),o($Vk,[2,38],{22:[1,47]}),{9:[1,49],24:[1,48],32:[1,50]},o($Vl,[2,26]),{21:$Vm,27:51,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},o($Vl,[2,29]),{21:$Vm,27:68,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:69,30:$Vn,31:[1,70],36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:71,30:$Vn,31:[1,72],36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:73,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{7:75,8:76,14:11,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,21:$V6,72:74},{21:$Vm,27:77,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{73:[1,78]},{2:$V0,4:79,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:11,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,21:$V6,65:$V7,66:$V8,67:$V9,71:$Va,73:$Vb,74:$Vc,76:[1,80],77:$Vd,78:$Ve,79:$Vf},o($Vg,[2,90]),o($Vg,[2,91]),o($Vg,[2,92]),{23:[1,81]},{21:$Vm,27:82,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},o($Vj,[2,36]),{21:[1,83]},{23:[1,84],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{21:$Vm,27:102,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:103,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{14:105,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,21:$Vm,27:104,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},o($VT,[2,59]),o($VT,[2,60]),o($VT,[2,61]),o($VT,[2,62]),o($VT,[2,63]),o($VT,[2,64]),o($VT,[2,65],{22:[1,106]}),{30:[1,107]},{30:[1,108]},{30:[1,109]},{30:[1,110]},{30:[1,111]},{30:[1,112]},o($Vl,[2,32],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS}),{31:[1,113],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{9:[1,114]},{31:[1,115],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{9:[1,116]},{31:[1,117],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{21:$Vm,27:118,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},o($VU,[2,86]),{9:[1,119]},{31:[1,120],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{30:[1,121]},{2:$V0,6:28,7:4,8:5,10:6,11:7,12:8,13:9,14:11,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,21:$V6,65:$V7,66:$V8,67:$V9,71:$Va,73:$Vb,74:$Vc,76:[1,122],77:$Vd,78:$Ve,79:$Vf},o($VV,[2,89]),{22:[1,123],24:[1,124]},{9:[1,125],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},o($Vk,[2,37]),{22:[1,127],24:[1,129],33:[1,126],34:[1,128]},{21:$Vm,27:130,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:131,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:132,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:133,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:134,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:135,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:136,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:137,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:138,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:139,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:140,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:141,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:142,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:143,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},o($VT,[2,54]),o($VT,[2,55]),{21:$Vm,27:144,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},o($VT,[2,39]),o($VW,[2,57],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP}),{31:[1,145],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{31:[1,146]},{21:$Vm,27:147,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:148,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:149,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:150,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:151,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:152,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:153,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{9:[1,154]},o($Vg,[2,76]),{9:[1,155]},o($Vg,[2,78]),{68:156,75:$Vh},{9:[1,157],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},o($VU,[2,87]),{68:158,75:$Vh},{21:$Vm,27:159,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},o($VV,[2,88]),{23:[1,160]},{22:[1,161],26:[1,162],29:[1,163]},o($Vj,[2,35]),o($Vl,[2,27]),{21:$Vm,27:164,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},o($Vl,[2,30]),{21:$Vm,27:165,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},o($VX,[2,40],{33:$VC,34:$VD}),o($VX,[2,41],{33:$VC,34:$VD,37:$VF}),o($VX,[2,42],{33:$VC,34:$VD,37:$VF}),o($VY,[2,43],{33:$VC,34:$VD,37:$VF,38:$VG,39:$VH,41:$VJ}),o($VY,[2,44],{33:$VC,34:$VD,37:$VF,38:$VG,39:$VH,41:$VJ}),o($VX,[2,45],{33:$VC,34:$VD,37:$VF}),o($VZ,[2,46],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ}),o($VZ,[2,47],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ}),o($VZ,[2,48],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ}),o($VZ,[2,49],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ}),o($VZ,[2,50],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ}),o($VZ,[2,51],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ}),o([9,23,31,32,48,50,51],[2,52],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,49:$VR}),o($VW,[2,53],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP}),{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:[1,166]},o($VT,[2,58]),{21:$Vm,27:167,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{23:[1,168],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{31:[1,169],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{31:[1,170],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{31:[1,171],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{31:[1,172],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{31:[1,173],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{31:[1,174],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},o($Vg,[2,75]),o($Vg,[2,77]),o($Vg,[2,82],{69:175,70:[1,176]}),{8:177,21:$V6},o($Vg,[2,84]),{31:[1,178],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{24:[1,179]},{21:$Vm,27:181,28:180,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{14:182,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5},{30:[1,183]},{23:[1,184],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},o($Vl,[2,33],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS}),{21:$Vm,27:185,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},o($VT,[2,68]),o($VT,[2,67],{22:[1,186]}),o($VT,[2,69]),o($VT,[2,70]),o($VT,[2,71]),o($VT,[2,72]),o($VT,[2,73]),o($VT,[2,74]),o($Vg,[2,79]),{11:188,67:$V9,68:187,75:$Vh},{31:[1,189]},{9:[1,190]},{22:[1,191],26:[1,192]},{23:[1,193],32:$V_},o($V$,[2,23],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS}),{22:[1,195]},{21:$Vm,27:196,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{24:[1,199],33:[1,197],34:[1,198]},o([9,23,31,32,51],[2,56],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS}),{21:$Vm,27:200,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},o($Vg,[2,80]),o($Vg,[2,81]),{68:201,75:$Vh},o($Vg,[2,85]),{22:[1,203],25:202},{14:204,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5},{9:[1,205]},{21:$Vm,27:206,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{21:$Vm,27:207,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{31:[1,208],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},o($Vl,[2,28]),o($Vl,[2,31]),{21:$Vm,27:209,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{23:[1,210],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},o($Vg,[2,83]),{23:[1,211],32:[1,212]},{21:$Vm,27:181,28:213,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{22:[1,214]},o($Vj,[2,19]),o($V$,[2,22],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS}),{23:[1,215],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{9:[1,216]},o($Vl,[2,34],{33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS}),o($VT,[2,66]),{9:[1,217]},{22:[1,218]},{23:[1,219],32:$V_},{21:$Vm,27:220,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{9:[1,221]},o($Vj,[2,21]),o($Vj,[2,17]),{21:$Vm,27:181,28:222,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},o($V$,[2,25]),{23:[1,223],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},o($Vj,[2,20]),{23:[1,224],32:$V_},{22:[1,225]},o($V$,[2,24]),{21:$Vm,27:226,30:$Vn,36:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB},{23:[1,227],33:$VC,34:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS},{9:[1,228]},o($Vj,[2,18])],
defaultActions: {27:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Aritmetica} = require('../Expresion/aritmetica')
    const {Relacional} = require('../Expresion/Relacional')
    const {Negacion} = require('../Expresion/Negacion')
    const {Ternario} = require('../Expresion/Ternario')
    const {TOString, TOLower, TOUpper, LENGHT, LENGHT2, TypeOF, Redondear} = require('../Expresion/TO')
    const {VectorDec1, VectorDec2, VectorDec3, MatrizDec1, MatrizDec2, InicializacionV, InicializacionM} = require('../Instruccion/ARRAYyMATRIZ')
    const {Casteo} = require('../Expresion/Casteo')
    const {Literal} = require('../Expresion/Literal')
    const {ErrorE} = require('../Error/Error')
    const {If} = require('../Instruccion/If')
    const {Ciclo} = require('../Instruccion/Ciclo')
    const {BREAK} = require('../Instruccion/BreakContinue')
    const {Entorno, EntornoC, EntornoD} = require('../Instruccion/Entorno')
    const {Declaracion, Inicializacion} = require('../Instruccion/Declaracion')
    const {Llamado, LlamadoM, LlamadoV} = require('../Expresion/Llamado')
    const {Print, Println} = require('../Instruccion/Print')
    Errores = []
    exports.Errores = Errores
    Impresion = ""
    exports.Impresion = Impresion
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ESPACIOS EN BLANCO
break;
case 1://COMENTARIO UNA LINEA
break;
case 2://COMENTARIO MULTILINEA
break;
case 3:return 15;
break;
case 4:return 16;
break;
case 5:return 17;
break;
case 6:return 'SWITCH';
break;
case 7:return 'CASE';
break;
case 8:return 67;
break;
case 9:return 70;
break;
case 10:return 18;
break;
case 11:return 19;
break;
case 12:return 57;
break;
case 13:return 58;
break;
case 14:return 77;
break;
case 15:return 78;
break;
case 16:return 79;
break;
case 17:return 74;
break;
case 18:return 73;
break;
case 19:return 71;
break;
case 20:return 66;
break;
case 21:return 65;
break;
case 22:return 61;
break;
case 23:return 62;
break;
case 24:return 64;
break;
case 25:return 60;
break;
case 26:return 63;
break;
case 27:return 59;
break;
case 28:return 29;
break;
case 29:return 'RUN';
break;
case 30:return 26;
break;
case 31:return 21;
break;
case 32: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 55; 
break;
case 33:return 54;
break;
case 34:return 53;
break;
case 35: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 56; 
break;
case 36:return 33;
break;
case 37:return 34;
break;
case 38:return 40;
break;
case 39:return 36;
break;
case 40:return 39;
break;
case 41:return 37;
break;
case 42:return 38;
break;
case 43:return 41;
break;
case 44:return 42;
break;
case 45:return 24;
break;
case 46:return 43;
break;
case 47:return 52;
break;
case 48:return 45;
break;
case 49:return 44
break;
case 50:return 47;
break;
case 51:return 46;
break;
case 52:return 30;
break;
case 53:return 31;
break;
case 54:return 22;
break;
case 55:return 23;
break;
case 56:return 75;
break;
case 57:return 76;
break;
case 58:return 9;
break;
case 59:return 51;
break;
case 60:return 32;
break;
case 61:return 49;
break;
case 62:return 48;
break;
case 63:return 50;
break;
case 64:return 5;
break;
case 65: Errores.push(new ErrorE(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext)) 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/[^\n]*)/i,/^(?:\/\*[^\*]*[\*]+([^/\*][^\*]*(\*)+)*\/)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:(_)*[a-zA-ZnÑ]+[_a-zA-Z0-9ñÑ]*\b)/i,/^(?:"(\\n|\\"|\\'|\\t|\\\\|\\r|[^\"\\\n])*")/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:'(\\n|\\"|\\'|\\t|\\\\|\\r|[^\'\\\n])')/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}