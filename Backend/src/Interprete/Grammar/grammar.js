/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,24],$V2=[1,25],$V3=[1,26],$V4=[1,27],$V5=[1,28],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,23],$Ve=[1,20],$Vf=[1,21],$Vg=[1,22],$Vh=[2,5,16,17,18,19,20,22,66,67,68,72,74,75,76,79,81,82,83,84,85],$Vi=[1,46],$Vj=[1,60],$Vk=[1,53],$Vl=[1,51],$Vm=[1,52],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,61],$Vu=[1,62],$Vv=[1,63],$Vw=[1,64],$Vx=[1,65],$Vy=[1,66],$Vz=[22,23,32],$VA=[2,5,16,17,18,19,20,22,31,37,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,74,75,76,79,81,82,83,84,85],$VB=[9,25,33],$VC=[9,32],$VD=[1,101],$VE=[1,102],$VF=[1,91],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,92],$VL=[1,93],$VM=[1,94],$VN=[1,95],$VO=[1,96],$VP=[1,97],$VQ=[1,98],$VR=[1,99],$VS=[1,100],$VT=[1,103],$VU=[9,24,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],$VV=[22,31,37,53,54,55,56,57,58,59,60,61,62,63,64,65],$VW=[2,5,16,17,18,19,20,22,66,67,68,71,72,74,75,76,79,81,82,83,84,85],$VX=[9,24,32,33,49,50,51,52],$VY=[9,24,32,33,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52],$VZ=[9,24,32,33,37,41,43,44,45,46,47,48,49,50,51,52],$V_=[9,24,32,33,43,44,45,46,47,48,49,50,51,52],$V$=[1,213],$V01=[24,33],$V11=[79,81,82];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"TipoInstruccion":6,"Declaraciones":7,"Inicializacion":8,"PTCOMA":9,"Print":10,"If":11,"Ciclo":12,"Break":13,"Switch":14,"TipoVar":15,"INT":16,"DOUBLE":17,"BOOLEAN":18,"CHAR":19,"STRING":20,"Variables":21,"IDENTIFICADOR":22,"CORCHETEABRE":23,"CORCHETECIERRE":24,"ASIGNACION":25,"ListaVectores":26,"NEW":27,"Valor":28,"ListaValores":29,"TOCHARARRAY":30,"PARABRE":31,"PARCIERRE":32,"COMA":33,"INCREMENTO":34,"DECREMENTO":35,"Variables2":36,"RESTA":37,"POTENCIA":38,"MULTIPLICACION":39,"DIVISION":40,"SUMA":41,"MODULO":42,"IGUAL":43,"DIFERENTE":44,"MENOR":45,"MENORIGUAL":46,"MAYOR":47,"MAYORIGUAL":48,"OR":49,"AND":50,"TERNARIO":51,"DOSPT":52,"NEGACION":53,"ENTERO":54,"DECIMAL":55,"CADENA":56,"CARACTER":57,"TRUE":58,"FALSE":59,"TOSTRING":60,"LENGTH":61,"TOLOWER":62,"TOUPPER":63,"TYPEOF":64,"ROUND":65,"PRINT":66,"PRINTLN":67,"IF":68,"Entorno":69,"Else":70,"ELSE":71,"FOR":72,"Param1":73,"WHILE":74,"DO":75,"SWITCH":76,"LLAVEABRE":77,"EntornoS":78,"LLAVECIERRE":79,"Casos":80,"DEFAULT":81,"CASE":82,"BREAK":83,"CONTINUE":84,"RETURN":85,"Funciones":86,"Parametros":87,"instruccion":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PTCOMA",16:"INT",17:"DOUBLE",18:"BOOLEAN",19:"CHAR",20:"STRING",22:"IDENTIFICADOR",23:"CORCHETEABRE",24:"CORCHETECIERRE",25:"ASIGNACION",27:"NEW",30:"TOCHARARRAY",31:"PARABRE",32:"PARCIERRE",33:"COMA",34:"INCREMENTO",35:"DECREMENTO",37:"RESTA",38:"POTENCIA",39:"MULTIPLICACION",40:"DIVISION",41:"SUMA",42:"MODULO",43:"IGUAL",44:"DIFERENTE",45:"MENOR",46:"MENORIGUAL",47:"MAYOR",48:"MAYORIGUAL",49:"OR",50:"AND",51:"TERNARIO",52:"DOSPT",53:"NEGACION",54:"ENTERO",55:"DECIMAL",56:"CADENA",57:"CARACTER",58:"TRUE",59:"FALSE",60:"TOSTRING",61:"LENGTH",62:"TOLOWER",63:"TOUPPER",64:"TYPEOF",65:"ROUND",66:"PRINT",67:"PRINTLN",68:"IF",71:"ELSE",72:"FOR",74:"WHILE",75:"DO",76:"SWITCH",77:"LLAVEABRE",79:"LLAVECIERRE",81:"DEFAULT",82:"CASE",83:"BREAK",84:"CONTINUE",85:"RETURN",87:"Parametros",88:"instruccion"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[15,1],[15,1],[15,1],[15,1],[15,1],[7,2],[7,11],[7,16],[7,9],[7,11],[7,10],[29,3],[29,1],[26,5],[26,3],[8,2],[8,5],[8,8],[8,2],[8,5],[8,8],[8,3],[8,6],[8,9],[21,4],[21,2],[36,3],[36,1],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,2],[28,5],[28,2],[28,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,7],[28,4],[28,4],[28,4],[28,4],[28,4],[28,4],[28,4],[28,4],[10,5],[10,4],[10,5],[10,4],[11,6],[70,2],[70,2],[70,0],[12,8],[12,5],[12,7],[73,1],[73,2],[14,7],[78,4],[78,1],[78,3],[78,2],[80,4],[80,5],[69,3],[69,2],[13,2],[13,2],[13,2],[13,3],[86,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        arbol.generarIni();
        return $$[$0-1];
    
break;
case 2:
 arbol.generarInstrucciones(); this.$=$$[$0] 
break;
case 3:
 arbol.generarInstrucciones2(); for(let instruccion of $$[$0]){ $$[$0-1].push(instruccion) } this.$=$$[$0-1]  
break;
case 4: case 6: case 8: case 9: case 10:
 arbol.generarTipoInstruccion(); 
break;
case 5:
 arbol.generarTipoInstruccion2();  this.$ = $$[$0-1] 
break;
case 7:
 arbol.generarTipoInstruccion(); this.$ = [$$[$0]] 
break;
case 11:
 Errores.push(new ErrorE(this._$.first_line, this._$.first_column,'Sintactico', "Error Sintactico token inesperado Recouperado con: ;"  )); this.$=[] 
break;
case 12:
 arbol.generarTipoVar("Int"); this.$ = 0 
break;
case 13:
 arbol.generarTipoVar("Double"); this.$ = 1 
break;
case 14:
 arbol.generarTipoVar("Boolean"); this.$ = 2 
break;
case 15:
 arbol.generarTipoVar("Char"); this.$ = 3 
break;
case 16:
 arbol.generarTipoVar("String"); this.$ = 4 
break;
case 17:
 arbol.generarDeclaraciones(); var arreglo= []; for(let variable of $$[$0]){ arreglo.push(new Declaracion(variable[0],variable[1],variable[2],variable[3],$$[$0-1])) } this.$=arreglo 
break;
case 18:
 arbol.generarDeclaraciones1($$[$0-9]); this.$ = [new MatrizDec1($$[$0-9], $$[$0-10], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column)] 
break;
case 19:
 arbol.generarDeclaraciones2($$[$0-14]); this.$ = [new MatrizDec2($$[$0-14], $$[$0-15], $$[$0-7], $$[$0-5], $$[$0-2], _$[$0-15].first_line, _$[$0-15].first_column)] 
break;
case 20:
 arbol.generarDeclaraciones3($$[$0-7]); this.$ = [new VectorDec1($$[$0-7], $$[$0-8], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column)] 
break;
case 21:
 arbol.generarDeclaraciones4($$[$0-9]); this.$ = [new VectorDec2($$[$0-9], $$[$0-10], $$[$0-4], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column)] 
break;
case 22:
 arbol.generarDeclaraciones5($$[$0-8]); this.$ = [new VectorDec3($$[$0-8],$$[$0-9], $$[$0-2], _$[$0-9].first_line, _$[$0-9].first_column)] 
break;
case 23:
 arbol.generarListaValores2(); $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 24:
 arbol.generarListaValores(); this.$ = [$$[$0]] 
break;
case 25:
 arbol.generarListaVectores2(); $$[$0-4].push($$[$0-1]); this.$ = $$[$0-4] 
break;
case 26:
 arbol.generarListaVectores(); this.$ = [$$[$0-1]] 
break;
case 27:
 arbol.generarInicializacion($$[$0-1],$$[$0]); this.$ = [new Inicializacion(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], new Aritmetica( new Llamado($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column), new Literal(1, 0, _$[$0-1].first_line, _$[$0-1].first_column),7, _$[$0-1].first_line, _$[$0-1].first_column))] 
break;
case 28:
 arbol.generarInicializacion2($$[$0-4],$$[$0]); this.$ = [new InicializacionV($$[$0-4], $$[$0-2], new Aritmetica( new LlamadoV($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column), new Literal(1, 0, _$[$0-4].first_line, _$[$0-4].first_column),7, _$[$0-4].first_line, _$[$0-4].first_column), _$[$0-4].first_line, _$[$0-4].first_column)]
break;
case 29:
 arbol.generarInicializacion3($$[$0-7],$$[$0]); this.$ = [new InicializacionM($$[$0-7], $$[$0-5], $$[$0-2], new Aritmetica( this.$ = new LlamadoM($$[$0-7], $$[$0-5], $$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column), new Literal(1, 0, _$[$0-7].first_line, _$[$0-7].first_column),7, _$[$0-7].first_line, _$[$0-7].first_column), _$[$0-7].first_line, _$[$0-7].first_column)] 
break;
case 30:
 arbol.generarInicializacion($$[$0-1],$$[$0]); this.$ = [new Inicializacion(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], new Aritmetica( new Llamado($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column), new Literal(1, 0, _$[$0-1].first_line, _$[$0-1].first_column),8, _$[$0-1].first_line, _$[$0-1].first_column))] 
break;
case 31:
 arbol.generarInicializacion2($$[$0-4],$$[$0]); this.$ = [new InicializacionV($$[$0-4], $$[$0-2], new Aritmetica( new LlamadoV($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column), new Literal(1, 0, _$[$0-4].first_line, _$[$0-4].first_column),8, _$[$0-4].first_line, _$[$0-4].first_column), _$[$0-4].first_line, _$[$0-4].first_column)]
break;
case 32:
 arbol.generarInicializacion($$[$0-7],$$[$0]); this.$ = [new InicializacionM($$[$0-7], $$[$0-5], $$[$0-2], new Aritmetica( this.$ = new LlamadoM($$[$0-7], $$[$0-5], $$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column), new Literal(1, 0, _$[$0-7].first_line, _$[$0-7].first_column),8, _$[$0-7].first_line, _$[$0-7].first_column), _$[$0-7].first_line, _$[$0-7].first_column)] 
break;
case 33:
 arbol.generarInicializacion4($$[$0-2]); this.$ = [new Inicializacion(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])] 
break;
case 34:
 arbol.generarInicializacion5($$[$0-5]); this.$ = [new InicializacionV($$[$0-5], $$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column)] 
break;
case 35:
 arbol.generarInicializacion6($$[$0-8]); this.$ = [new InicializacionM($$[$0-8], $$[$0-6], $$[$0-3], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column)] 
break;
case 36:
 arbol.generarVariables(); for( i in $$[$0-3] ){ $$[$0-3][i][3] = $$[$0-1] } this.$ = $$[$0-3] 
break;
case 37:
 arbol.generarVariables_1(); this.$ = $$[$0-1] 
break;
case 38:
 arbol.generarVariables2_1($$[$0]); $$[$0-2].push([_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], null]); this.$ = $$[$0-2]  
break;
case 39:
 arbol.generarVariables2_($$[$0]); this.$ =[ [_$[$0].first_line, _$[$0].first_column, $$[$0], null] ] 
break;
case 40:
 arbol.generarValorOperacionU("-");  this.$ = new Aritmetica($$[$0],new Literal(-1, 0, _$[$0-1].first_line, _$[$0-1].first_column),2, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 41:
 arbol.generarValorOperacion("^"); this.$ = new Aritmetica($$[$0-2],$$[$0],4, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 42:
 arbol.generarValorOperacion("*"); this.$ = new Aritmetica($$[$0-2],$$[$0],2, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 43:
 arbol.generarValorOperacion("/"); this.$ = new Aritmetica($$[$0-2],$$[$0],3, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 44:
 arbol.generarValorOperacion("+"); this.$ = new Aritmetica($$[$0-2],$$[$0],0, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 45:
 arbol.generarValorOperacion("-"); this.$ = new Aritmetica($$[$0-2],$$[$0],1, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 46:
 arbol.generarValorOperacion("%"); this.$ = new Aritmetica($$[$0-2],$$[$0],5, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 47:
 arbol.generarValorOperacion("=="); this.$ = new Relacional($$[$0-2],$$[$0],0, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 48:
 arbol.generarValorOperacion("!="); this.$ = new Relacional($$[$0-2],$$[$0],1, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 49:
 arbol.generarValorOperacion("<"); this.$ = new Relacional($$[$0-2],$$[$0],4, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 50:
 arbol.generarValorOperacion("<="); this.$ = new Relacional($$[$0-2],$$[$0],5, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 51:
 arbol.generarValorOperacion(">"); this.$ = new Relacional($$[$0-2],$$[$0],2, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 52:
 arbol.generarValorOperacion(">="); this.$ = new Relacional($$[$0-2],$$[$0],3, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 53:
 arbol.generarValorOperacion("||"); this.$ = new Relacional($$[$0-2],$$[$0],7, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 54:
 arbol.generarValorOperacion("&&"); this.$ = new Relacional($$[$0-2],$$[$0],6, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 55:
 arbol.generarINCDEC("++"); this.$ = new Aritmetica($$[$0-1],new Literal(1, 0, _$[$0-1].first_line, _$[$0-1].first_column),7, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 56:
 arbol.generarINCDEC("--"); this.$ = new Aritmetica($$[$0-1],new Literal(1, 0, _$[$0-1].first_line, _$[$0-1].first_column),8, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 57:
 arbol.generarValorT(); this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 58:
 arbol.generarValorOperacionU("!"); this.$ = new Negacion($$[$0],2, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 59:
 arbol.generarValorPar(); this.$ = $$[$0-1] 
break;
case 60:
 arbol.generarValor($$[$0]); this.$ = new Literal($$[$0],0, _$[$0].first_line, _$[$0].first_column) 
break;
case 61:
 arbol.generarValor($$[$0]); this.$ = new Literal($$[$0],1, _$[$0].first_line, _$[$0].first_column) 
break;
case 62:
 arbol.generarValor($$[$0]); this.$ = new Literal($$[$0], 4, _$[$0].first_line, _$[$0].first_column) 
break;
case 63:
 arbol.generarValor($$[$0]); this.$ = new Literal($$[$0], 3, _$[$0].first_line, _$[$0].first_column) 
break;
case 64:
 arbol.generarValor($$[$0]); this.$ = new Literal(true, 2, _$[$0].first_line, _$[$0].first_column) 
break;
case 65:
 arbol.generarValor($$[$0]); this.$ = new Literal(false, 2, _$[$0].first_line, _$[$0].first_column) 
break;
case 66:
 arbol.generarValorA($$[$0]); this.$ = new Llamado($$[$0], _$[$0].first_line, _$[$0].first_column) 
break;
case 67:
 arbol.generarValorAM($$[$0-6]); this.$ = new LlamadoM($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 68:
 arbol.generarValorAV($$[$0-3]); this.$ = new LlamadoV($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 69:
 arbol.generarValorCasteo(); this.$ = new Casteo($$[$0], $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 70:
 arbol.generarValorFuncion("ToString"); this.$ = new TOString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 71:
 arbol.generarValorFuncion("length"); this.$ = new LENGHT($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 72:
 arbol.generarValorFuncion("toLower");  this.$ = new TOLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 73:
 arbol.generarValorFuncion("toUpper"); this.$ = new TOUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 74:
 arbol.generarValorFuncion("typeOf"); this.$ = new TypeOF($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 75:
 arbol.generarValorFuncion("round"); this.$ = new Redondear($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 76:
 arbol.generarPrint("Print"); this.$ = [new Print(_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2])] 
break;
case 77:
 arbol.generarPrint2("Print"); this.$ = [new Print(_$[$0-3].first_line, _$[$0-3].first_column, new Literal("", 4, _$[$0-3].first_line, _$[$0-3].first_column))] 
break;
case 78:
 arbol.generarPrint("Println"); this.$ = [new Println(_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2])] 
break;
case 79:
 arbol.generarPrint2("Println"); this.$ = [new Println(_$[$0-3].first_line, _$[$0-3].first_column, new Literal("", 4, _$[$0-3].first_line, _$[$0-3].first_column))] 
break;
case 80:
 arbol.generarIf(); this.$ = new If($$[$0-3], new EntornoI($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column), $$[$0], _$[$0-5].first_line, _$[$0-5].first_column)  
break;
case 81:
 arbol.generarElse(); this.$ = new Entorno($$[$0], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 82:
 arbol.generarElse(); this.$ = $$[$0] 
break;
case 83:
 arbol.generarElse2(); this.$ = null 
break;
case 84:
 arbol.generarFor(); $$[$0-5].push(new EntornoC($$[$0-4], $$[$0], $$[$0-2][0], _$[$0-7].first_line, _$[$0-7].first_column)); this.$ = [ new Ciclo(new Entorno($$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column), _$[$0-7].first_line, _$[$0-7].first_column)] 
break;
case 85:
 arbol.generarWhile(); this.$ = [new Ciclo(new EntornoC($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column), _$[$0-4].first_line, _$[$0-4].first_column)] 
break;
case 86:
 arbol.generarDWhile(); this.$ = [new Ciclo(new EntornoD($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column), _$[$0-6].first_line, _$[$0-6].first_column)] 
break;
case 87:
 arbol.generarParam(); 
break;
case 88:
 arbol.generarParam1(); this.$ = $$[$0-1] 
break;
case 89:
 arbol.generarSwitch(); this.$ = [new Switch(new EntornoW($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column), _$[$0-6].first_line, _$[$0-6].first_column)] 
break;
case 90:
 arbol.generarEntornoS(); $$[$0-3].push(new EntornoCase(null, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)); this.$ = $$[$0-3] 
break;
case 91:
 arbol.generarEntornoS2(); this.$ = $$[$0] 
break;
case 92:
 arbol.generarEntornoS3(); this.$ = [new EntornoCase(null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)] 
break;
case 93:
 arbol.generarEntornoS4(); this.$ = [new EntornoCase(null, [], _$[$0-1].first_line, _$[$0-1].first_column)] 
break;
case 94:
 arbol.generarCasos(); this.$ = [new EntornoCase($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)] 
break;
case 95:
 arbol.generarCasos2(); $$[$0-4].push(new EntornoCase($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column)); this.$=$$[$0-4]
break;
case 96:
 arbol.generarEntorno2(); this.$ = $$[$0-1] 
break;
case 97:
 arbol.generarEntorno(); this.$ = [] 
break;
case 98:
 arbol.generarBreak("Break"); this.$ = [ new BREAK("Break", _$[$0-1].first_line, _$[$0-1].first_column) ] 
break;
case 99:
 arbol.generarBreak("Continue"); this.$ = [ new BREAK("Continue", _$[$0-1].first_line, _$[$0-1].first_column) ] 
break;
case 100:
 arbol.generarBreak("Return"); this.$ = [ new RETURN(null, _$[$0-1].first_line, _$[$0-1].first_column) ] 
break;
case 101:
 arbol.generarBreak("Return"); this.$ = [ new RETURN($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) ] 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:12,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$V6,66:$V7,67:$V8,68:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,83:$Ve,84:$Vf,85:$Vg},{1:[3]},{2:$V0,5:[1,29],6:30,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:12,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$V6,66:$V7,67:$V8,68:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,83:$Ve,84:$Vf,85:$Vg},o($Vh,[2,2]),o($Vh,[2,4]),{9:[1,31]},o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),{9:[1,32]},{21:33,22:[1,34],36:35},{23:[1,37],25:[1,39],34:[1,36],35:[1,38]},{31:[1,40]},{31:[1,41]},{31:[1,42]},{31:[1,43]},{31:[1,44]},{69:45,77:$Vi},{9:[1,47]},{9:[1,48]},{9:[1,49],22:$Vj,28:50,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{31:[1,67]},o($Vz,[2,12]),o($Vz,[2,13]),o($Vz,[2,14]),o($Vz,[2,15]),o($Vz,[2,16]),{1:[2,1]},o($Vh,[2,3]),o($Vh,[2,5]),o($Vh,[2,11]),o($VA,[2,17]),o($VB,[2,39],{23:[1,68]}),{9:[1,70],25:[1,69],33:[1,71]},o($VC,[2,27]),{22:$Vj,28:72,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},o($VC,[2,30]),{22:$Vj,28:73,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:74,31:$Vk,32:[1,75],37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:76,31:$Vk,32:[1,77],37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:78,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{7:80,8:81,15:12,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$V6,73:79},{22:$Vj,28:82,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{74:[1,83]},{2:$V0,4:84,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:12,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$V6,66:$V7,67:$V8,68:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,79:[1,85],83:$Ve,84:$Vf,85:$Vg},o($Vh,[2,98]),o($Vh,[2,99]),o($Vh,[2,100]),{9:[1,86],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{22:$Vj,28:104,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:105,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{15:107,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$Vj,28:106,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},o($VU,[2,60]),o($VU,[2,61]),o($VU,[2,62]),o($VU,[2,63]),o($VU,[2,64]),o($VU,[2,65]),o($VU,[2,66],{23:[1,108]}),{31:[1,109]},{31:[1,110]},{31:[1,111]},{31:[1,112]},{31:[1,113]},{31:[1,114]},{22:$Vj,28:115,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{24:[1,116]},{22:$Vj,28:117,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},o($VA,[2,37]),{22:[1,118]},{24:[1,119],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},o($VC,[2,33],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT}),{32:[1,120],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{9:[1,121]},{32:[1,122],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{9:[1,123]},{32:[1,124],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{22:$Vj,28:125,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},o($VV,[2,87]),{9:[1,126]},{32:[1,127],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{31:[1,128]},{2:$V0,6:30,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:12,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$V6,66:$V7,67:$V8,68:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,79:[1,129],83:$Ve,84:$Vf,85:$Vg},o($VW,[2,97]),o($Vh,[2,101]),{22:$Vj,28:130,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:131,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:132,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:133,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:134,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:135,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:136,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:137,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:138,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:139,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:140,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:141,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:142,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:143,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},o($VU,[2,55]),o($VU,[2,56]),{22:$Vj,28:144,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},o($VU,[2,40]),o($VX,[2,58],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ}),{32:[1,145],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{32:[1,146]},{22:$Vj,28:147,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:148,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:149,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:150,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:151,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:152,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:153,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{32:[1,154],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{23:[1,155],25:[1,156]},{9:[1,157],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},o($VB,[2,38]),{23:[1,159],25:[1,161],34:[1,158],35:[1,160]},{9:[1,162]},o($Vh,[2,77]),{9:[1,163]},o($Vh,[2,79]),{69:164,77:$Vi},{9:[1,165],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},o($VV,[2,88]),{69:166,77:$Vi},{22:$Vj,28:167,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},o($VW,[2,96]),o($VY,[2,41],{34:$VD,35:$VE}),o($VY,[2,42],{34:$VD,35:$VE,38:$VG}),o($VY,[2,43],{34:$VD,35:$VE,38:$VG}),o($VZ,[2,44],{34:$VD,35:$VE,38:$VG,39:$VH,40:$VI,42:$VK}),o($VZ,[2,45],{34:$VD,35:$VE,38:$VG,39:$VH,40:$VI,42:$VK}),o($VY,[2,46],{34:$VD,35:$VE,38:$VG}),o($V_,[2,47],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK}),o($V_,[2,48],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK}),o($V_,[2,49],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK}),o($V_,[2,50],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK}),o($V_,[2,51],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK}),o($V_,[2,52],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK}),o([9,24,32,33,49,51,52],[2,53],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,50:$VS}),o($VX,[2,54],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ}),{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:[1,168]},o($VU,[2,59]),{22:$Vj,28:169,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{24:[1,170],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{32:[1,171],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{32:[1,172],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{32:[1,173],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{32:[1,174],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{32:[1,175],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{32:[1,176],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{77:[1,177]},{24:[1,178]},{23:[1,179],27:[1,180],30:[1,181]},o($VA,[2,36]),o($VC,[2,28]),{22:$Vj,28:182,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},o($VC,[2,31]),{22:$Vj,28:183,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},o($Vh,[2,76]),o($Vh,[2,78]),o($Vh,[2,83],{70:184,71:[1,185]}),{8:186,22:$V6},o($Vh,[2,85]),{32:[1,187],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{22:$Vj,28:188,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},o($VU,[2,69]),o($VU,[2,68],{23:[1,189]}),o($VU,[2,70]),o($VU,[2,71]),o($VU,[2,72]),o($VU,[2,73]),o($VU,[2,74]),o($VU,[2,75]),{78:190,80:191,81:[1,192],82:[1,193]},{25:[1,194]},{22:$Vj,28:196,29:195,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{15:197,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5},{31:[1,198]},{24:[1,199],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},o($VC,[2,34],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT}),o($Vh,[2,80]),{11:201,68:$V9,69:200,77:$Vi},{32:[1,202]},{9:[1,203]},o([9,24,32,33,52],[2,57],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT}),{22:$Vj,28:204,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{79:[1,205]},{79:[2,91],81:[1,206],82:[1,207]},{52:[1,208]},{22:$Vj,28:209,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{23:[1,210],27:[1,211]},{24:[1,212],33:$V$},o($V01,[2,24],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT}),{23:[1,214]},{22:$Vj,28:215,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{25:[1,218],34:[1,216],35:[1,217]},o($Vh,[2,81]),o($Vh,[2,82]),{69:219,77:$Vi},o($Vh,[2,86]),{24:[1,220],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},o($Vh,[2,89]),{52:[1,221]},{22:$Vj,28:222,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{2:$V0,4:223,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:12,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$V6,66:$V7,67:$V8,68:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,79:[2,93],83:$Ve,84:$Vf,85:$Vg},{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:[1,224]},{23:[1,226],26:225},{15:227,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5},{9:[1,228]},{22:$Vj,28:229,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{22:$Vj,28:230,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{32:[1,231],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},o($VC,[2,29]),o($VC,[2,32]),{22:$Vj,28:232,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},o($Vh,[2,84]),o($VU,[2,67]),{2:$V0,4:233,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:12,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$V6,66:$V7,67:$V8,68:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,83:$Ve,84:$Vf,85:$Vg},{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,52:[1,234]},{2:$V0,6:30,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:12,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$V6,66:$V7,67:$V8,68:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,79:[2,92],83:$Ve,84:$Vf,85:$Vg},{2:$V0,4:235,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:12,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$V6,66:$V7,67:$V8,68:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,83:$Ve,84:$Vf,85:$Vg},{24:[1,236],33:[1,237]},{22:$Vj,28:196,29:238,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{23:[1,239]},o($VA,[2,20]),o($V01,[2,23],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT}),{24:[1,240],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{9:[1,241]},o($VC,[2,35],{34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT}),{2:$V0,6:30,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:12,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$V6,66:$V7,67:$V8,68:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,79:[2,90],83:$Ve,84:$Vf,85:$Vg},{2:$V0,4:242,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:12,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$V6,66:$V7,67:$V8,68:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,83:$Ve,84:$Vf,85:$Vg},o($V11,[2,94],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:12,6:30,2:$V0,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$V6,66:$V7,67:$V8,68:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,83:$Ve,84:$Vf,85:$Vg}),{9:[1,243]},{23:[1,244]},{24:[1,245],33:$V$},{22:$Vj,28:246,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{9:[1,247]},o($VA,[2,22]),o($V11,[2,95],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:12,6:30,2:$V0,16:$V1,17:$V2,18:$V3,19:$V4,20:$V5,22:$V6,66:$V7,67:$V8,68:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,83:$Ve,84:$Vf,85:$Vg}),o($VA,[2,18]),{22:$Vj,28:196,29:248,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},o($V01,[2,26]),{24:[1,249],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},o($VA,[2,21]),{24:[1,250],33:$V$},{23:[1,251]},o($V01,[2,25]),{22:$Vj,28:252,31:$Vk,37:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:$Vx,65:$Vy},{24:[1,253],34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,46:$VO,47:$VP,48:$VQ,49:$VR,50:$VS,51:$VT},{9:[1,254]},o($VA,[2,19])],
defaultActions: {29:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Aritmetica} = require('../Expresion/aritmetica')
    const {Relacional} = require('../Expresion/Relacional')
    const {Negacion} = require('../Expresion/Negacion')
    const {Ternario} = require('../Expresion/Ternario')
    const {TOString, TOLower, TOUpper, LENGHT, LENGHT2, TypeOF, Redondear} = require('../Expresion/TO')
    const {VectorDec1, VectorDec2, VectorDec3, MatrizDec1, MatrizDec2, InicializacionV, InicializacionM} = require('../Instruccion/ARRAYyMATRIZ')
    const {Casteo} = require('../Expresion/Casteo')
    const {Literal} = require('../Expresion/Literal')
    const {ErrorE} = require('../Error/Error')
    const {If} = require('../Instruccion/If')
    const {Ciclo} = require('../Instruccion/Ciclo')
    const {BREAK} = require('../Instruccion/BreakContinue')
    const {Entorno,EntornoI, EntornoC, EntornoD, EntornoCase, EntornoW} = require('../Instruccion/Entorno')
    const {Declaracion, Inicializacion} = require('../Instruccion/Declaracion')
    const {Switch} = require('../Instruccion/Switch')
    const {Llamado, LlamadoM, LlamadoV} = require('../Expresion/Llamado')
    const {Print, Println} = require('../Instruccion/Print')
    const {Arbol} = require('../Extra/Arbol')
    Errores = []
    exports.Errores = Errores
    Impresion = ""
    exports.Impresion = Impresion
    arbol = new Arbol();
    exports.arbol = arbol

    TablaSimbolos =[]
    exports.TablaSimbolos = TablaSimbolos
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ESPACIOS EN BLANCO
break;
case 1://COMENTARIO UNA LINEA
break;
case 2://COMENTARIO MULTILINEA
break;
case 3:return 'VOID';
break;
case 4:return 16;
break;
case 5:return 17;
break;
case 6:return 18;
break;
case 7:return 76;
break;
case 8:return 82;
break;
case 9:return 68;
break;
case 10:return 71;
break;
case 11:return 19;
break;
case 12:return 20;
break;
case 13:return 58;
break;
case 14:return 59;
break;
case 15:return 83;
break;
case 16:return 84;
break;
case 17:return 81;
break;
case 18:return 85;
break;
case 19:return 75;
break;
case 20:return 74;
break;
case 21:return 72;
break;
case 22:return 67;
break;
case 23:return 66;
break;
case 24:return 62;
break;
case 25:return 63;
break;
case 26:return 65;
break;
case 27:return 61;
break;
case 28:return 64;
break;
case 29:return 60;
break;
case 30:return 30;
break;
case 31:return 'RUN';
break;
case 32:return 27;
break;
case 33:return 22;
break;
case 34: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 56; 
break;
case 35:return 55;
break;
case 36:return 54;
break;
case 37: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 57; 
break;
case 38:return 34;
break;
case 39:return 35;
break;
case 40:return 41;
break;
case 41:return 37;
break;
case 42:return 40;
break;
case 43:return 38;
break;
case 44:return 39;
break;
case 45:return 42;
break;
case 46:return 43;
break;
case 47:return 25;
break;
case 48:return 44;
break;
case 49:return 53;
break;
case 50:return 46;
break;
case 51:return 45
break;
case 52:return 48;
break;
case 53:return 47;
break;
case 54:return 31;
break;
case 55:return 32;
break;
case 56:return 23;
break;
case 57:return 24;
break;
case 58:return 77;
break;
case 59:return 79;
break;
case 60:return 9;
break;
case 61:return 52;
break;
case 62:return 33;
break;
case 63:return 50;
break;
case 64:return 49;
break;
case 65:return 51;
break;
case 66:return 5;
break;
case 67: Errores.push(new ErrorE(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext)) 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/[^\n]*)/i,/^(?:\/\*[^\*]*[\*]+([^/\*][^\*]*(\*)+)*\/)/i,/^(?:void\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:default\b)/i,/^(?:return\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:(_)*[a-zA-ZnÑ]+[_a-zA-Z0-9ñÑ]*\b)/i,/^(?:"(\\n|\\"|\\'|\\t|\\\\|\\r|[^\"\\\n])*")/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:'(\\n|\\"|\\'|\\t|\\\\|\\r|[^\'\\\n])')/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}